<?php
/**
 * Created by JetBrains PhpStorm.
 * User: hitanshu
 * Date: 15/4/13
 * Time: 4:58 PM
 * To change this template use File | Settings | File Templates.
 */

class TestService
{
    private $testRepo;
    private $contentTagRepo;
    private $questionService;
    private $mongoRepo;
    private $topicRepo;
    private $videoService;
    private $staticContentService;

    public function __construct()
    {
        $this->testRepo = new TestRepository();
        $this->contentTagRepo = new ContentTagRepository();
        $this->questionService = new QuestionsService();
        $this->mongoRepo = new MongoRepository();
        $this->topicRepo = new TopicRepository();

    }

    public function getTests($boardCode, $classLevelCode, $subjectCode, $chapterCode, $testType)
    {
        $board = EducationBoard::getModelFromCode($boardCode);
        $classLevel = ClassLevel::getModelFromCode($classLevelCode);
        $subject = Subject::getModelFromCode($subjectCode);
        $chapter = Chapter::getModelFromCode($chapterCode);
        if (empty($board) || empty($classLevel) || empty($subject) || empty($chapter) || empty($testType))
            return array();
        $tests = $this->testRepo->getTests($board->id, $classLevel->id, $subject->id, $chapter->id, $testType);
        return $tests;
    }

    public function getAllTopicTestCodesByTestCodeLevelAndTestType($code, $testType, $level)
    {
        return $this->testRepo->getAllTopicTestsByTestCodeLevelAndTestType($code, $testType, $level);
    }

    public function getTest($testCode)
    {
        $test = $this->testRepo->getTest($testCode);
        if (empty($test))
            return array();
        return $test;
    }

    private function updateTestTimeIntervals($startTimeInMilliSeconds, $timeInMilliSeconds)
    {
        return $timeInMilliSeconds - $startTimeInMilliSeconds;

    }

    private function filterResponseCode($questionsResponse)
    {
        $count = 0;
        foreach ($questionsResponse as $key => $value) {
            if (!empty($value) || $value != "")
                $count++;
        }
        if (!empty($count))
            return true;
        return false;
    }

    public function checkResponse($responses)
    {
        $marksForSingleQuestion = 1;
        $questionCodes = array();
        $responsesWithQuestionCodesMap = array();
        $questionAttempts = 0;
        foreach ($responses as $response) {
            $questionCodes[] = $response['qcode'];
            $responsesWithQuestionCodesMap[$response['qcode']] = $response['responseCode'];
            $filterResponse = $this->filterResponseCode($response['responseCode']);
            if ($filterResponse)
                $questionAttempts++;

        }
        $totalQuestions = count($questionCodes);
        $correctAnswerKeyMap = $this->questionService->getAnswersForQuestions($questionCodes);
        $result = array_map(function ($correctAnswerKeyMap, $responsesWithQuestionCodesMap) { //maps the two arrays
            $correct = false;
            foreach ($correctAnswerKeyMap as $row) {
                $status = in_array($row, $responsesWithQuestionCodesMap);
                if ($status)
                    $correct = true;

            }
            if ($correct)
                return true;
            else
                return false;
        }, $correctAnswerKeyMap, $responsesWithQuestionCodesMap);

        $correct = 0;
        foreach ($result as $answer) {
            if ($answer == true) {
                $correct++;
            }
        }

        $totalMarks = $correct * $marksForSingleQuestion;
        $percentageOfMarks = ($totalMarks / ($totalQuestions * $marksForSingleQuestion)) * 100;

        return array('totalQuestions' => $totalQuestions, 'totalAttempts' => $questionAttempts, 'totalCorrect' => $correct, 'totalMarks' => $totalMarks, 'percentageMarks' => $percentageOfMarks);
    }

    public function insertTestAttempts($testCode, $testStartDateTime, $testStartTimeInMs, $testEndDateTime, $responses, $UID = null)
    {
        $responseResult = $this->checkResponse($responses);
        $mongoData = array();
        foreach ($responses as $responsekey => $response) {
            //updating time interval in milliseconds
            foreach ($response['timeInterval'] as $key => $value) {
                $startTime = $this->updateTestTimeIntervals($testStartTimeInMs, $value['startTime']);
                $endTime = $this->updateTestTimeIntervals($testStartTimeInMs, $value['endTime']);
                $response['timeInterval'][$key] = array('startTime' => $startTime, 'endTime' => $endTime);
            }
            $responses[$responsekey] = $response;
        }
        $mongoData['testCode'] = $testCode;
        $mongoData['testStartDateTime'] = $testStartDateTime;
        $mongoData['response'] = $responses;
        $mongoData['testEndDateTime'] = $testEndDateTime;
        $mongoData['UID'] = $UID;
        $mongoData['totalQuestions'] = $responseResult['totalQuestions'];
        $mongoData['totalAttempts'] = $responseResult['totalAttempts'];
        $mongoData['totalCorrect'] = $responseResult['totalCorrect'];
        $mongoData['totalMarks'] = $responseResult['totalMarks'];
        $mongoData['percentageMarks'] = $responseResult['percentageMarks'];
        $result = $this->mongoRepo->create(MongoTest::MONGO_CONTAINER_NAME, $mongoData);
        if ($result)
            return $mongoData;
        return false;

    }

    public function insertTopicScore($studentId, $topicId, $testId, $subjectId, $levelOneScore, $levelTwoScore, $levelThreeScore, $currentLevel, $isCompleted, $levelOnePercentageMarks, $levelTwoPercentageMarks, $levelThreePercentageMarks)
    {
        $data = array('studentId' => $studentId, 'topicId' => $topicId, 'testId' => $testId, 'subjectId' => $subjectId,
            'levelOneScore' => $levelOneScore, 'levelTwoScore' => $levelTwoScore,
            'levelThreeScore' => $levelThreeScore, 'currentLevel' => $currentLevel,
            'isCompleted' => $isCompleted, 'levelOnePercentageMarks' => $levelOnePercentageMarks, 'levelTwoPercentageMarks' => $levelTwoPercentageMarks, 'levelThreePercentageMarks' => $levelThreePercentageMarks, 'createdAt' => Util::getCurrentUTCTimeString(),
            'updatedAt' => Util::getCurrentUTCTimeString());

        $result = $this->mongoRepo->create(TopicMapping::$containerName, $data);
        if ($result) {

            $topicResult = $this->mongoRepo->read(TopicMapping::$containerName, array('studentId' => $studentId));
            $topicMapping = null;
            if (!empty($topicResult)) {
                $topicMapping = new TopicMapping();
                $topicMapping->studentId = $topicResult['studentId'];
                $topicMapping->topicId = $topicResult['topicId'];
                $topicMapping->subjectId = $topicResult['subjectId'];
                $topicMapping->levelOneScore = $topicResult['levelOneScore'];
                $topicMapping->levelTwoScore = $topicResult['levelTwoScore'];
                $topicMapping->levelThreeScore = $topicResult['levelThreeScore'];
                $topicMapping->currentLevel = $topicResult['currentLevel'];
                $topicMapping->isCompleted = $topicResult['isCompleted'];
                $topicMapping->levelOnePercentageMarks = $topicResult['levelOnePercentageMarks'];
                $topicMapping->levelTwoPercentageMarks = $topicResult['levelTwoPercentageMarks'];
                $topicMapping->levelThreePercentageMarks = $topicResult['levelThreePercentageMarks'];
                $topicMapping->createdAt = $topicResult['createdAt'];
                $topicMapping->updatedAt = $topicResult['updatedAt'];
            }

            return $topicMapping;
        } else {
            return false;
        }

    }

    public function insertOrUpdateTestGuruStatus($studentId, $topicId, $testId, $subjectCode, $marks)
    {
        $data = array('studentId' => $studentId, 'topicId' => $topicId, 'testId' => $testId, 'subjectId' => $subjectCode,
            'marks' => $marks, 'createdAt' => Util::getCurrentUTCTimeString(),
            'updatedAt' => Util::getCurrentUTCTimeString());

        $result = $this->mongoRepo->create(TopicMapping::$containerName, $data);
        if ($result) {
            $topicResult = $this->mongoRepo->read(TopicMapping::$containerName, array('studentId' => $studentId));
            $topicGuru = null;
            if (!empty($topicResult)) {
                $topicGuru = new TopicGuru();
                $topicGuru->studentId = $topicResult['studentId'];
                $topicGuru->topicId = $topicResult['topicId'];
                $topicGuru->subjectId = $topicResult['subjectId'];
                $topicGuru->marks= $topicResult['marks'];
                $topicGuru->createdAt = $topicResult['createdAt'];
                $topicGuru->updatedAt = $topicResult['updatedAt'];
            }
            return $topicGuru;
        } else {
            return false;
        }
    }

    public function insertOrUpdateTestScore($studentId, $topicId, $testId, $subjectCode, $levelOneScore = null, $levelTwoScore = null, $levelThreeScore = null, $currentLevel = null, $isCompleted = null, $levelOnePercentageMarks = null, $levelTwoPercentageMarks = null, $levelThreePercentageMarks = null)
    {
        $topicScore = $this->getTopicScore($studentId, $topicId, $testId);

        if ($topicScore) {
            $searchFields = array('studentId' => $studentId, 'topicId' => $topicId, 'testId' => $testId);

            $data = array();
            if ($levelOneScore != null)
                $data['levelOneScore'] = $levelOneScore;
            if ($levelTwoScore != null)
                $data['levelTwoScore'] = $levelTwoScore;
            if ($levelThreeScore != null)
                $data['levelThreeScore'] = $levelThreeScore;
            if ($currentLevel != null)
                $data['currentLevel'] = $currentLevel;
            if ($isCompleted != null)
                $data['isCompleted'] = $isCompleted;
            if ($levelOnePercentageMarks != null)
                $data['levelOnePercentageMarks'] = $levelOnePercentageMarks;
            if ($levelTwoPercentageMarks != null)
                $data['levelTwoPercentageMarks'] = $levelTwoPercentageMarks;
            if ($levelThreePercentageMarks != null)
                $data['levelThreePercentageMarks'] = $levelThreePercentageMarks;
            $data['updatedAt'] = Util::getCurrentUTCTimeString();

            return $this->updateTopicScore($searchFields, $data);
        } else {
            $this->insertTopicScore($studentId, $topicId, $testId, $subjectCode, $levelOneScore, $levelTwoScore, $levelThreeScore, $currentLevel, $isCompleted, $levelOnePercentageMarks, $levelTwoPercentageMarks, $levelThreePercentageMarks);
        }


    }

    public function updateTopicScore($searchFields, $data)
    {
        $result = $this->mongoRepo->update(TopicMapping::$containerName, $searchFields, $data);
        if ($result) {

            $topicResult = $this->mongoRepo->read(TopicMapping::$containerName, $searchFields);
            $topicMapping = null;
            if (!empty($topicResult)) {
                $topicMapping = new TopicMapping();
                $topicMapping->studentId = $topicResult['studentId'];
                $topicMapping->topicId = $topicResult['topicId'];
                $topicMapping->subjectId = $topicResult['subjectId'];
                $topicMapping->levelOneScore = $topicResult['levelOneScore'];
                $topicMapping->levelTwoScore = $topicResult['levelTwoScore'];
                $topicMapping->levelThreeScore = $topicResult['levelThreeScore'];
                $topicMapping->levelOnePercentageMarks = $topicResult['levelOnePercentageMarks'];
                $topicMapping->levelTwoPercentageMarks = $topicResult['levelTwoPercentageMarks'];
                $topicMapping->levelThreePercentageMarks = $topicResult['levelThreePercentageMarks'];
                $topicMapping->currentLevel = $topicResult['currentLevel'];
                $topicMapping->isCompleted = $topicResult['isCompleted'];
                $topicMapping->createdAt = $topicResult['createdAt'];
                $topicMapping->updatedAt = $topicResult['updatedAt'];
            }

            return $topicMapping;
        } else {
            return false;
        }
    }

    public function updateMedalStatus($studentId, $testCode, $contentTag, $level)
    {

        if ($level != DifficultyLevel::LEVEL_TWO)
            throw new InvalidArgumentException("Level 2 expected");
//        $topicIds = $this->topicRepo->getTopicCodesByBoardClassSubjectChapter($contentTag->educationBoardId, $contentTag->classLevelId, $contentTag->subjectId, $contentTag->chapterId);
        $testCodes = $this->getAllTopicTestCodesByTestCodeLevelAndTestType($testCode, Tests::CHAPTER_TEST, $level);

        if ($level == DifficultyLevel::LEVEL_ONE) {
            $levelScoreString = 'levelOnePercentageMarks';
        } elseif ($level == DifficultyLevel::LEVEL_TWO) {
            $levelScoreString = 'levelTwoPercentageMarks';
        } else {
            $levelScoreString = 'levelThreePercentageMarks';
        }
        $searchFields = array('testId' => array('$in' =>$testCodes ), 'currentLevel' => $level, 'studentId' => $studentId, 'isCompleted' => true);
        $mongoRepo = new MongoRepository();
        try {
            $mongTestsObjects = $mongoRepo->readAll(TopicMapping::$containerName, $searchFields);
            if ($mongTestsObjects) {
                $testsCount = $mongTestsObjects->count();
                if ($testsCount != count($testCodes))
                    return null;
                $res = $mongoRepo->getTotalMarksForTopic(TopicMapping::$containerName, $searchFields, $levelScoreString);
                if (!empty($res) && !empty($testCodes)) {
                    $avg = $res / count($testCodes);
                    $medalId = Util::getMedalId($avg);
                    if (!empty($medalId)) {
                        $isChapterMedalExist = $this->getChapterMedal($studentId, Chapter::getModelFromId($contentTag->chapterId)->code);
                        if (!$isChapterMedalExist)
                            return $this->insertChapterMedals($studentId, Chapter::getModelFromId($contentTag->chapterId)->code, $medalId, $level);
                        else {
                            $updatedFields = array('updatedAt' => Util::getCurrentUTCTimeString(), 'medalId' => $medalId);
                            $this->updateChapterMedal($studentId, Chapter::getModelFromId($contentTag->chapterId)->code, $updatedFields);
                        }
                    }
                }
            }

            return null;
        } catch (Exception $e) {
            Log::error($e);
            return false;
        }
    }

    public function getChapterMedal($studentId, $chapterId)
    {
        $searchFields = array('studentId' => $studentId, 'chapterId' => $chapterId);


        $chapterResults = $this->mongoRepo->read(Medals::$CONTAINER_NAME, $searchFields);
        $medal = null;
        if (!empty($chapterResults)) {
            $medal = new Medals();
            $medal->studentId = $chapterResults['studentId'];
            $medal->chapterId = $chapterResults['chapterId'];
            $medal->medalId = $chapterResults['medalId'];
            $medal->createdAt = $chapterResults['createdAt'];
            $medal->updatedAt = $chapterResults['updatedAt'];

            return $medal;
        } else {
            return false;
        }
    }

    public function updateChapterMedal($studentId, $chapterId, $updatedFields)
    {
        $searchFields = array('studentId' => $studentId, 'chapterId' => $chapterId);
        return $this->mongoRepo->update(Medals::$CONTAINER_NAME, $searchFields, $updatedFields);
    }

    public function insertChapterMedals($studentId, $chapterId, $medalId, $level)
    {
        $data = array('studentId' => $studentId, 'chapterId' => $chapterId, 'medalId' => $medalId, 'level' => $level, 'createdAt' => Util::getCurrentUTCTimeString(),
            'updatedAt' => Util::getCurrentUTCTimeString());

        $result = $this->mongoRepo->create(Medals::$CONTAINER_NAME, $data);
        if ($result) {

            $medalResult = $this->mongoRepo->read(Medals::$CONTAINER_NAME, array('studentId' => $studentId, 'chapterId' => $chapterId, 'medalId' => $medalId));
            $studentChapterMedal = null;
            if (!empty($medalResult)) {
                $studentChapterMedal = new Medals();
                $studentChapterMedal->studentId = $medalResult['studentId'];
                $studentChapterMedal->chapterId = $medalResult['chapterId'];
                $studentChapterMedal->medalId = $medalResult['medalId'];
                $studentChapterMedal->createdAt = $medalResult['createdAt'];
                $studentChapterMedal->updatedAt = $medalResult['updatedAt'];
            }

            return $studentChapterMedal;
        } else {
            return false;
        }
    }

    public function getTopicScore($studentId, $topicId, $testId)
    {
        $searchFields = array('studentId' => $studentId, 'topicId' => $topicId, 'testId' => $testId);

        $topicResult = $this->mongoRepo->read(TopicMapping::$containerName, $searchFields);
        $topicMapping = null;
        if (!empty($topicResult)) {
            $topicMapping = new TopicMapping();
            $topicMapping->studentId = $topicResult['studentId'];
            $topicMapping->topicId = $topicResult['topicId'];
            $topicMapping->levelOneScore = $topicResult['levelOneScore'];
            $topicMapping->levelTwoScore = $topicResult['levelTwoScore'];
            $topicMapping->levelThreeScore = $topicResult['levelThreeScore'];
            $topicMapping->currentLevel = $topicResult['currentLevel'];
            $topicMapping->levelOnePercentageMarks = $topicResult['levelOnePercentageMarks'];
            $topicMapping->levelTwoPercentageMarks = $topicResult['levelTwoPercentageMarks'];
            $topicMapping->levelThreePercentageMarks = $topicResult['levelThreePercentageMarks'];
            $topicMapping->isCompleted = $topicResult['isCompleted'];
            $topicMapping->createdAt = $topicResult['createdAt'];
            $topicMapping->updatedAt = $topicResult['updatedAt'];
            return $topicMapping;
        } else {
            return false;
        }
    }

    public function getTestForTagId($tagId)
    {
        return $this->testRepo->getTestForTagId($tagId);

    }

    public function getRelatedTabsData($tagId)
    {
        $this->videoService = new VideoService();
        $this->staticContentService = new StaticContentService();
        $relatedNoteAndTestAndVideo = array();
        $relatedNoteAndTestAndVideo['test'] = null;
        $video = $this->videoService->getVideoForTagId($tagId);
        if (!is_null($video) && $video == False)
            $relatedNoteAndTestAndVideo['video'] = null;
        elseif (is_null($video))
            $relatedNoteAndTestAndVideo['video'] = null; else
            $relatedNoteAndTestAndVideo['video'] = $video;

        $notes = $this->staticContentService->getStaticContentForTagId($tagId);
        if (!is_null($notes) && $notes == False)
            $relatedNoteAndTestAndVideo['notes'] = null;
        elseif (is_null($notes))
            $relatedNoteAndTestAndVideo['notes'] = null; else
            $relatedNoteAndTestAndVideo['notes'] = $notes;
        return $relatedNoteAndTestAndVideo;
    }

    public function countTestForTagIds($tagId)
    {
        return $this->testRepo->countTestForTagIds($tagId);
    }


}
